options
{
    STATIC = true;  // by default
	LOOKAHEAD=1; // use lookahead 1
}


PARSER_BEGIN(Yal2jvm)
import java.io.*;
import javax.swing.JOptionPane;
import java.util.*;

	
public class Yal2jvm
{ 
	public static void main(String[] args) throws ParseException
	{
		Yal2jvm myLang; 

		// Read all files inside a specific folder
		String filePath = ".\\MyFirstYalExamples\\"; 
	    File folder = new File(filePath);
	    File[] listOfFiles = folder.listFiles();
		int numberOfFiles = listOfFiles.length;
		ArrayList<String> testFiles = new ArrayList<String>();
		String fileName = "" ;

		// get the file number from  folder
		for (int i = 0; i < numberOfFiles; i++)
		{			if (listOfFiles[i].isFile())
			{				testFiles.add(listOfFiles[i].getName());
	     	}
		}

		// This code was used for reading 1 file at a time		
		// fileName += JOptionPane.showInputDialog(null,"Write the filename","Enter filename with extension", JOptionPane.QUESTION_MESSAGE);

		// read the testing files and run 1 by 1
		try		{
		   // first time
			FileInputStream fis;
			fileName = filePath + testFiles.get(0);
			fis = new FileInputStream(fileName);
			myLang = new Yal2jvm(fis);
			SimpleNode root = myLang.Module(); // returns the reference to the node of the root from the tree
			root.dump(""); // print the tree on screen
			fis.close(); 
			
			// repeat for each test file
			// int should start at 1 since first test file was already executed
		  	for (int i = 1; i < testFiles.size(); i++)
		    {
		       fileName = filePath + testFiles.get(i);
		       System.out.println("\nexecuting: " + fileName + "\n");
		       fis = new FileInputStream(fileName);
			   //myLang = new Yal2jvm(fis);
			   myLang.ReInit(fis);
			   root = myLang.Module(); // returns the reference to the node of the root from the tree
			   root.dump(""); // print the tree on screen
			   fis.close(); 
			   
		    }

		}
		catch(IOException e)
		{			System.out.println("oh oh - problem with file" + e);
		}
		
		//System.out.println("Value of expression: "+myCalc.eval(root));
	}

	public int eval(SimpleNode node) {
		if(node.jjtGetNumChildren() == 0) // leaf node with integer value
			return node.val;
		else if(node.jjtGetNumChildren() == 1) // only one child
			return this.eval((SimpleNode) node.jjtGetChild(0));
		SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
		SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child

		// TODO
    	//switch (node.id) {	    //case JJTMODULE:        return new this.eval(id)
	    //case JJTFUNCTION:
	    //case JJTVAR:		//default : // abort		//		System.out.println("Operador ilegal!");		//		System.exit(1);		//}
		return 0;
	}

	private static void setNode(SimpleNode node, Token t) {
        ((myNode)node).setData(t.toString(), t.beginLine, t.beginColumn);
    }

}


PARSER_END(Yal2jvm)


<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}
/* reserved words */
<DEFAULT> TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">

}
<DEFAULT> TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}


myNodeModule Module() #Module:{Token t1;}
{
	<MODULE> t1=<ID> { setNode(jjtThis, t1); }
	 <LCHAVETA> // write down the module name
     (Declaration())* (Function())*
	 <RCHAVETA> {return (myNodeModule)jjtThis;}
}

void Declaration():{Token t1=null, t2=null;}
{
	{
  		boolean isMinus = false;
  		int n;	}
	( t1=<ID> { setNode(jjtThis, t1); }  (ArrayElement())? )
	( <ASSIGN>
	( ( "[" ArraySize() "]" ) |

	( <ADDSUB_OP>		{ isMinus=true;	}
	)? t2=<INTEGER>
	{
	  //n = Integer.Parse(t2.image)
	  //setNode(jjtThis, : n = isMinus ? n*-1 : n);	})
	 )? <PVIRG>
}

void Function() #Function :{Token t1, t2=null;}
{
	<FUNCTION>
	t1=<ID> { setNode(jjtThis, t1); } 	((ArrayElement())?<ASSIGN> t2=<ID> { setNode(jjtThis, t2); }	)?

	  <LPAR> ( Varlist() )? <RPAR> 

	 <LCHAVETA> Stmtlst() <RCHAVETA>
}

void Varlist():{Token t1, t2=null;}
{
	t1=<ID> { setNode(jjtThis, t1); } ( ArrayElement())? ( <VIRG> ( ArrayElement() | t2=<ID> {setNode(jjtThis, t2); } ) )*
}

void ArrayElement():{}
{
	"[" "]"
}

// not needed anymore, change was made were its called
//void ScalarElement():{}
//{//  <ID>
//}

void Stmtlst():{}
{
	( Stmt() )*
}

void Stmt()#void:{}
{	  While() | If() | //First() |
	  LOOKAHEAD(2)
	  Assign() | <ID> Call() <PVIRG> // Added <ID>
}

void Assign():{}
{
	Lhs() <ASSIGN> Rhs() <PVIRG>
}

void Lhs():{Token t1;}
{	t1=<ID> { setNode(jjtThis, t1); }  ( ArrayAccess() | ScalarAccess())
}

void Rhs():{Token t1;}
{ 
	( Term() ( ( t1=<ARITH_OP> | t1=<BITWISE_OP> | t1=<ADDSUB_OP> ) { setNode(jjtThis, t1); }  Term() )? )
	|	"[" ArraySize() "]"
}

void ArraySize():{Token t1;}
{ 
	((t1=<ID> ScalarAccess()) | t1=<INTEGER>) { setNode(jjtThis, t1); } 
}


void Term():{Token t1, t2 = null;}
{
	( t2=<ADDSUB_OP> { setNode(jjtThis, t2); }  )?
	( t1=<INTEGER> |
	t1=<ID> ( ArrayAccess() | LOOKAHEAD(2) Call() | ScalarAccess() )
	) { setNode(jjtThis, t1); } 
}

void Exprtest():{Token t1;}
{
	<LPAR> Lhs() t1=<RELA_OP> { setNode(jjtThis, t1); }  Rhs() <RPAR>
}

void While():{}
{
	<WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>
}

void If():{}
{  <IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst() <RCHAVETA> )?
}

void Call():{Token t1 = null;}
{
  
   ( "." t1=<ID> { setNode(jjtThis, t1); }  )? <LPAR> ( ArgumentList() )? <RPAR>
}

void ArgumentList():{}
{    Argument() ( <VIRG> Argument() )*
}

void Argument() #void:{Token t1;}
{      ( t1=<ID> { setNode(jjtThis, t1); } #Variable(0)
    | t1=<STRING> { setNode(jjtThis, t1); } #ValueStr(0)
    | t1=<INTEGER> { setNode(jjtThis, t1); } #ValueInt(0))
}

void ArrayAccess():{}
{  "[" Index() "]"
}

void ScalarAccess():{Token t1= null;}
{   ( "." t1= <SIZE> { setNode(jjtThis, t1); } )? 
}

void Index():{Token t1;}
{  (t1= <ID> | t1= <INTEGER>) { setNode(jjtThis, t1); } 
}
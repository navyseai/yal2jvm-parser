options
{
	LOOKAHEAD=1; // TODO: change this to only use lookahead 1
}
PARSER_BEGIN(Yal2jvm)
package projecto;
import java.io.*;
import javax.swing.JOptionPane;
	
public class Yal2jvm
{ 
 
	public static void main(String[] args) throws ParseException
	{
		Yal2jvm myLang;

		
		String fileName = ".\\project\\projecto\\";
		fileName += JOptionPane.showInputDialog(null,"Write the filename","Enter filename with extension", JOptionPane.QUESTION_MESSAGE);

		try		{		  
			myLang = new Yal2jvm(new java.io.FileInputStream(fileName));
			SimpleNode root = myLang.Module(); // devolve referência para o nó raiz da árvore
			root.dump(""); // imprime no ecrã a árvore
		}
		catch(IOException e)
		{			System.out.println("oh oh - problem with file" + e);
		}
		
		//in.close();
		//System.out.println("Valor da expressão: "+myCalc.eval(root));
	}

	int eval(SimpleNode node) {
		if(node.jjtGetNumChildren() == 0) // leaf node with integer value
			return node.val;
		else if(node.jjtGetNumChildren() == 1) // only one child
			return this.eval((SimpleNode) node.jjtGetChild(0));
		SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
		SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child

		// TODO: Delete
//		switch(node.id) {//			case CalculatorTreeConstants.JJTADD : return eval( lhs ) + eval( rhs );//			case CalculatorTreeConstants.JJTSUB : return eval( lhs ) - eval( rhs );//			case CalculatorTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs );//			case CalculatorTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs );//		default : // abort//				System.out.println("Operador ilegal!");//				System.exit(1);//			}
		return 0;
	}
}


PARSER_END(Yal2jvm)


<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}
/* reserved words */
<DEFAULT> TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
//| <PRINT: "print">
}
<DEFAULT> TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

SimpleNode Expression(): {}
{
	{return jjtThis;} // código Java entre chavetas
}

SimpleNode Module():{}
{
	<MODULE> <ID> <LCHAVETA>
     (Declaration())* (Function())*
	 <RCHAVETA> {return jjtThis;}
}

void Declaration():{}
{
	( <ID> (ArrayElement())? ) ( <ASSIGN> ( ( "[" ArraySize() "]" ) | ( <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
}

void Function():{}
{
	<FUNCTION>
	<ID>	((ArrayElement())?<ASSIGN> <ID>)?

	  <LPAR> ( Varlist() )? <RPAR> 

	 <LCHAVETA> Stmtlst() <RCHAVETA>
}

void Varlist():{}
{
	( ArrayElement() | <ID> ) ( <VIRG> ( ArrayElement() | <ID> ) )*
}

void ArrayElement():{}
{
	"[" "]"
}

// not needed anymore, change was made were its called
//void ScalarElement():{}
//{//  <ID>
//}

void Stmtlst():{}
{
	( Stmt() )*
}

void Stmt():{}
{	  While() | If() | //First() |
	  LOOKAHEAD(3)
	  Assign() | Call() <PVIRG>
}

// First attempt of modifying grammar
//void First():{}
//{//	<FUNCTION> <STRING> <LPAR>//	(<LETTER>)? <RPAR>
//}

void Assign():{}
{
	Lhs() <ASSIGN> Rhs() <PVIRG>
}

void Lhs():{}
{	<ID> ( ArrayAccess() | ScalarAccess())
}

void Rhs():{}
{ 
	( Term() ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term() )? )
	|
	"[" ArraySize() "]"
}

void ArraySize():{}
{ 
	(<ID> ScalarAccess()) | <INTEGER>
}

void Term():{}
{
	( <ADDSUB_OP> )? ( <INTEGER> | /*LOOKAHEAD(3)*/ <ID>	( ArrayAccess() | (	( Call() | ScalarAccess()) ))
	)
}

void Exprtest():{}
{
	<LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
}

void While():{}
{
	<WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>
}

void If():{}
{  <IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst() <RCHAVETA> )?
}

void Call():{}
{
  // Added first <ID>
   <ID> ( "." <ID> )? <LPAR> ( ArgumentList() )? <RPAR>
}

void ArgumentList():{}
{   Argument() ( <VIRG> Argument() )*
}

void Argument():{}
{  ( <ID> | <STRING> | <INTEGER> )
}

void ArrayAccess():{}
{  "[" Index() "]"
}

void ScalarAccess():{}
{   ( "." <SIZE> )? 
}

void Index():{}
{  <ID> | <INTEGER>
}